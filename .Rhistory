library(quantmod)
getOptionChain("SPY")
install.packages("quantmod")
library(quantmod)
getOptionChain("SPY")
source('~/.active-rstudio-document')
getOptionChain("SPY")
install.packages("jsonlite")
getOptionChain("SPY")
getOptionChain("SPY")
library(quantmod)       # get vix data from yahoo
library(lubridate)      # date calculation
setwd("C:\\Users\\zzhao\\GitRepos\\zzql.R")
source("get_option_chain.R")        # option chain from yahoo
optdf <- getOptionChain("SPY")
call <- optdf$calls
put <- optdf$puts
spylast <- getQuote("SPY")$Last
rf <- 0.0015
filterCalls <- function(optdf, underlying_last, rf){
if(is.null(optdf$Strike) | is.null(optdf$Bid) | is.null(optdf$Ask))
stop("Option data frame missing column: Strike, Bid or Ask!")
# extract OTM option
optdf <- optdf[optdf$Strike > spylast * (1+rf), ]
# filter by bid prices
# bids after 2 consecutive 0s are discarded
idx <- 0
for(i in 1:(nrow(optdf)-1)){
if(all(optdf$Bid[i:(i+1)] == 0))
{
idx <- i-1
if(idx==0)  stop("idx = 0!")
break
}
}
return(optdf[1:idx,])
}
filterCalls(optdf = call, underlying_last = spylast, rf = 0.0015)
call
spylast
filterCalls(optdf = call, underlying_last = spylast, rf = 0.0015)
debugSource('C:/Users/zzhao/GitRepos/zzql.R/vix_formula.R')
debugSource('C:/Users/zzhao/GitRepos/zzql.R/vix_formula.R')
optdf
debugSource('C:/Users/zzhao/GitRepos/zzql.R/vix_formula.R')
idx
library(quantmod)       # get vix data from yahoo
library(lubridate)      # date calculation
setwd("C:\\Users\\zzhao\\GitRepos\\zzql.R")
source("get_option_chain.R")        # option chain from yahoo
optdf <- getOptionChain("SPY")
call <- optdf$calls
put <- optdf$puts
spylast <- getQuote("SPY")$Last
rf <- 0.0015
filterCalls <- function(optdf, underlying_last, rf){
if(is.null(optdf$Strike) | is.null(optdf$Bid) | is.null(optdf$Ask))
stop("Option data frame missing column: Strike, Bid or Ask!")
# extract OTM option
optdf <- optdf[optdf$Strike > spylast * (1+rf), ]
# filter by bid prices
# bids after 2 consecutive 0s are discarded
idx <- 0
for(i in 1:(nrow(optdf)-1)){
if(all(optdf$Bid[i:(i+1)] == 0))
{
idx <- i-1
if(idx==0)  stop("idx = 0!")
break
}
}
return(optdf[1:idx,])
}
debugSource('C:/Users/zzhao/GitRepos/zzql.R/vix_formula.R')
debugSource('C:/Users/zzhao/GitRepos/zzql.R/vix_formula.R')
source('C:/Users/zzhao/GitRepos/zzql.R/vix_formula.R')
filterCalls(optdf = call, underlying_last = spylast, rf = 0.0015)
which(optdf$Bid == 0)
optdf$Bid
optdf <- filterCalls(optdf = call, underlying_last = spylast, rf = 0.0015)
optdf
optdf$Bid == 0
which(optdf$Bid != 0)
filterCalls <- function(optdf, underlying_last, rf){
if(is.null(optdf$Strike) | is.null(optdf$Bid) | is.null(optdf$Ask))
stop("Option data frame missing column: Strike, Bid or Ask!")
# extract OTM option
optdf <- optdf[optdf$Strike > spylast * (1+rf), ]
# filter by bid prices
# bids after 2 consecutive 0s are discarded
idx <- nrow(optdf)
for(i in 1:(nrow(optdf)-1)){
if(all(optdf$Bid[i:(i+1)] == 0))
{
idx <- i-1
if(idx==0)  stop("idx = 0!")
break
}
}
optdf <- optdf[1:idx,]
# remove 0 bids before returning
return(optdf[which(optdf$Bid != 0), ])
}
optdf <- filterCalls(optdf = call, underlying_last = spylast, rf = 0.0015)
library(quantmod)       # get vix data from yahoo
library(lubridate)      # date calculation
setwd("C:\\Users\\zzhao\\GitRepos\\zzql.R")
source("get_option_chain.R")        # option chain from yahoo
optdf <- getOptionChain("SPY")
call <- optdf$calls
put <- optdf$puts
spylast <- getQuote("SPY")$Last
rf <- 0.0015
filterCalls <- function(optdf, underlying_last, rf){
if(is.null(optdf$Strike) | is.null(optdf$Bid) | is.null(optdf$Ask))
stop("Option data frame missing column: Strike, Bid or Ask!")
# extract OTM option
optdf <- optdf[optdf$Strike > spylast * (1+rf), ]
# filter by bid prices
# bids after 2 consecutive 0s are discarded
idx <- nrow(optdf)
for(i in 1:(nrow(optdf)-1)){
if(all(optdf$Bid[i:(i+1)] == 0))
{
idx <- i-1
if(idx==0)  stop("idx = 0!")
break
}
}
optdf <- optdf[1:idx,]
# remove 0 bids before returning
return(optdf[which(optdf$Bid != 0), ])
}
call
optdf <- filterCalls(optdf = call, underlying_last = spylast, rf = 0.0015)
optdf
optdf <- put
put
optdf$Bid[11:12, ] <- 0
optdf$Bid[11:12, ] <- c(0, 0)
optdf$Bid[11:12] <- c(0, 0)
optdf
if(is.null(optdf$Strike) | is.null(optdf$Bid) | is.null(optdf$Ask))
stop("Option data frame missing column: Strike, Bid or Ask!")
# extract OTM option
optdf <- optdf[optdf$Strike <= spylast * (1+rf), ]
optdf
idx <- 1
for(i in nrow(optdf):2){
if(all(optdf$Bid[i:(i-1)] == 0))
{
idx <- i+1
if(idx==0)  stop("idx = 0!")
break
}
}
idx
optdf <- optdf[idx:nrow(optdf),]
optdf
filterPuts <- function(optdf, underlying_last, rf){
if(is.null(optdf$Strike) | is.null(optdf$Bid) | is.null(optdf$Ask))
stop("Option data frame missing column: Strike, Bid or Ask!")
# extract OTM option
optdf <- optdf[optdf$Strike <= spylast * (1+rf), ]
# filter by bid prices
# bids after 2 consecutive 0s are discarded
idx <- 1
for(i in nrow(optdf):2){
if(all(optdf$Bid[i:(i-1)] == 0))
{
idx <- i+1
if(idx==0)  stop("idx = 0!")
break
}
}
optdf <- optdf[idx:nrow(optdf),]
# remove 0 bids before returning
return(optdf[which(optdf$Bid != 0), ])
}
optdf <- filterPuts(optdf = optdf, spylast, 0.0015)
optdf
put$Bid[11:12] <- c(0, 0)
put
optdf <- filterPuts(optdf = put, spylast, 0.0015)
optdf
source("vix_formula.R")
rm(list = ls())
source("vix_formula.R")
rm(list = ls())
source("vix_formula.R")
symbol <- "SPY"
optdf <- getOptionChain(symbol)
call <- optdf$calls
put <- optdf$puts
last <- getQuote(symbol)$Last
rf <- 0.0015
print(filterCalls(call, last, rf))
rm(list = ls())
source("vix_formula.R")
symbol <- "SPY"
optdf <- getOptionChain(symbol)
call <- optdf$calls
put <- optdf$puts
last <- getQuote(symbol)$Last
rf <- 0.0015
print(filterCalls(call, last, rf))
print(filterPuts(put, last, rf))
rm(list = ls())
source("vix_formula.R")
symbol <- "GOOG"
optdf <- getOptionChain(symbol)
call <- optdf$calls
put <- optdf$puts
last <- getQuote(symbol)$Last
rf <- 0.0015
print(filterCalls(call, last, rf))
print(filterPuts(put, last, rf))
source('C:/Users/zzhao/GitRepos/zzql.R/get_option_chain.R')
optdf <- getOptionChain(symbol)
optdf
rm(list = ls())
source("vix_formula.R")
symbol <- "GOOG"
optdf <- getOptionChain(symbol)
call <- optdf$calls
put <- optdf$puts
last <- getQuote(symbol)$Last
rf <- 0.0015
print(filterCalls(call, last, rf))
print(filterPuts(put, last, rf))
optdf$calls
install.packages("ggplot2")
getSymbols("^VIX")
start <- as.Date("2011-01-01")
to <- start + 182
getSymbols("^VIX", from = start, to = end)
start <- as.Date("2011-01-01")
to <- start + 182
getSymbols("^VIX", from = as.character(start), to = as.character(end))
as.character(start)
as.character(end)
to <- start + 182
start <- as.Date("2011-01-01")
end <- start + 182
getSymbols("^VIX", from = as.character(start), to = as.character(end))
start <- as.Date("2011-01-01")
end <- start + 182
vix <- getSymbols("^VIX", from = as.character(start), to = as.character(end), auto.assign = F)
vix <- data.frame(vix)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+30), auto.assign = F)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+30), auto.assign = F)
spy <- data.frame(spy)
spyReturns <- diff(log(spy$SPY.Adjusted))
spyReturns <- diff(log(spy$SPY.Adjusted))
for(i in 1:length(vix$VIX.Adjusted)){
tmpvec <- spyReturns[i:(i+30)]
print(sum(tmpvec^2) / 30 * 252)
}
length(vix$VIX.Adjusted)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+30), auto.assign = F)
spy <- data.frame(spy)
spyReturns <- diff(log(spy$SPY.Adjusted))
for(i in 1:length(vix$VIX.Adjusted)){
tmpvec <- spyReturns[i:(i+30)]
print(sum(tmpvec^2) / 30 * 252)
}
spyReturns <- diff(log(spy$SPY.Adjusted))
for(i in 1:length(vix$VIX.Adjusted)){
tmpvec <- spyReturns[i:(i+22)]
print(sum(tmpvec^2) / 22 * 252)
}
spy[[6]] ==  spy$SPY.Adjusted
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
print(sum(tmpvec^2) / 22 * 252)
}
sqrt(0.02)
res <- c()
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
res[i] <- sum(tmpvec^2) / 22 * 252
}
na.omit(res)
res <- na.omit(res)
res <- as.numeric(na.omit(res))
res
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+100), auto.assign = F)
spy <- data.frame(spy)
res <- c()
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
res[i] <- sum(tmpvec^2) / 22 * 252
}
res <- as.numeric(na.omit(res))
plot.ts(vix$VIX.Adjusted)
lines(res*1000)
plot.ts(res*1000)
lines(vix$VIX.Adjusted, col="red")
start <- as.Date("2011-01-01")
period <- 180
end <- start + period
vix <- getSymbols("^VIX", from = as.character(start), to = as.character(end), auto.assign = F)
vix <- data.frame(vix)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+100), auto.assign = F)
spy <- data.frame(spy)
res <- c()
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
res[i] <- sum(tmpvec^2) / 22 * 252
}
res <- as.numeric(na.omit(res))
plot.ts(res*1000)
lines(vix$VIX.Adjusted, col="red")
start <- as.Date("2012-01-01")
period <- 365
end <- start + period
vix <- getSymbols("^VIX", from = as.character(start), to = as.character(end), auto.assign = F)
vix <- data.frame(vix)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+100), auto.assign = F)
spy <- data.frame(spy)
res <- c()
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
res[i] <- sum(tmpvec^2) / 22 * 252
}
res <- as.numeric(na.omit(res))
plot.ts(res*1000)
lines(vix$VIX.Adjusted, col="red")
start <- as.Date("2012-01-01")
period <- 365*2
end <- start + period
vix <- getSymbols("^VIX", from = as.character(start), to = as.character(end), auto.assign = F)
vix <- data.frame(vix)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+100), auto.assign = F)
spy <- data.frame(spy)
res <- c()
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
res[i] <- sum(tmpvec^2) / 22 * 252
}
res <- as.numeric(na.omit(res))
plot.ts(res*1000)
lines(vix$VIX.Adjusted, col="red")
start <- as.Date("2010-01-01")
period <- 365*5
end <- start + period
vix <- getSymbols("^VIX", from = as.character(start), to = as.character(end), auto.assign = F)
vix <- data.frame(vix)
spy <- getSymbols("SPY", from = as.character(start), to = as.character(end+100), auto.assign = F)
spy <- data.frame(spy)
res <- c()
spyReturns <- diff(log(spy[[6]]))
for(i in 1:length(vix[[6]])){
tmpvec <- spyReturns[i:(i+22)]
res[i] <- sum(tmpvec^2) / 22 * 252
}
res <- as.numeric(na.omit(res))
plot.ts(res*1000)
lines(vix$VIX.Adjusted, col="red")
